package com.gh.system.dao.bean;

import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.persistence.Table;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.internal.CriteriaImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.gh.ipsystem.util.Consts;
import com.gh.system.dao.IBaseDao;
import com.gh.system.domain.BaseDomain;
import com.gh.system.util.BeanCopyUtil;
import com.gh.system.util.ValidateUtil;
import com.gh.system.vo.PageInfo;

@Repository
public class BaseDao<T extends BaseDomain> implements IBaseDao<T> {  
	@Autowired
	private SessionFactory sessionFactory;
	protected Class<T> entityClass;
	protected String tableName;
	
	@SuppressWarnings("unchecked")
	public BaseDao() {
		Type type = getClass().getGenericSuperclass();
		if (type instanceof ParameterizedType) {  
			this.entityClass = (Class<T>) ((ParameterizedType) type).getActualTypeArguments()[0];
	        Annotation[] annotations = entityClass.getAnnotations(); 
	        for (Annotation annotation : annotations) {  
	            if (annotation instanceof Table) {  
	                tableName = ((Table) annotation).name();  
	            }  
	        }   
		} else {  
			this.entityClass = null;  
		}
	}
	
	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}
	
	/**
	 * 获取session
	 * @return
	 */
	protected Session getSession() {
		return sessionFactory.getCurrentSession();
//		Session session=null;
//		try {
//			session = sessionFactory.getCurrentSession();
//		} catch (HibernateException e) {
//			// TODO Auto-generated catch block
//		}
//		if(session==null){
//			session=sessionFactory.openSession();
//		}
//        return session;
    }
	
//	private void closeSession(Session session){
//		//关闭session
//		if(session!=null&&session.isOpen()){
//			session.close();
//		}
//	}

	/**
	 * @see IBaseDao#getById(Serializable)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public T getById(Serializable id) {
		if (id == null){
			return null;
		}
		Session session=getSession();
		T t=(T)session.get(entityClass, id);
		if(!t.isDelete()){
			return t;
		}else{
			return null;
		}
	}

	/**
	 * @see IBaseDao#save(Object)
	 */
	@Override
	public Serializable save(T t) {
		//添加创建者username和时间
		if(ValidateUtil.isEmpty(t.getCreatorUsername())){
	        Subject currentUser = SecurityUtils.getSubject();  
	        if(null != currentUser){
	        	org.apache.shiro.session.Session session = currentUser.getSession();  
	            if(null != session){
	            	t.setCreatorUsername((String)session.getAttribute(Consts.CURRENT_USER));
	            	t.setLastModifyUsername((String)session.getAttribute(Consts.CURRENT_USER));
	            }
	        }
		}
		if(null == t.getCreateTime()){
			t.setCreateTime(new Date());
			t.setLastModifyTime(new Date());
		}
		
		Session session=getSession();
		try{
			session.save(t);
			session.flush();
		}catch(Exception e){
			e.printStackTrace();
			return "";
		}
		
		return t.getId();
	}

	/**
	 * @see IBaseDao#update(Object)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public boolean update(T t) {
		//添加修改者username和时间
        Subject currentUser = SecurityUtils.getSubject();  
        if(null != currentUser){
        	org.apache.shiro.session.Session session = currentUser.getSession();  
            if(null != session){
            	t.setLastModifyUsername((String)session.getAttribute(Consts.CURRENT_USER));
            }
        }
		t.setLastModifyTime(new Date());
		
		Session session=getSession();
		try{
			//属性为null不更新
			T sourceT = (T)session.get(entityClass, t.getId());
			BeanCopyUtil beanCopyUtil = new BeanCopyUtil();
			beanCopyUtil.copyProperties(sourceT, t, true);
			session.merge(sourceT);
			session.flush();
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		
		return true;
	}

	@Override
	public boolean delete(T t) {
		t.setDelete(true);
		return update(t);
	}

	@Override
	public boolean deleteByIds(Serializable[] ids) {
		if(ids.length==0)
			return true;
		//添加修改者username和时间
		String lasetModUsername = "N/A";
        Subject currentUser = SecurityUtils.getSubject();  
        if(null != currentUser){
        	org.apache.shiro.session.Session session = currentUser.getSession();  
            if(null != session){
            	lasetModUsername = (String)session.getAttribute(Consts.CURRENT_USER);
            }
        }
		
        if (entityClass != null && entityClass.getName()!=null && entityClass.getName() != "") {  
        	String hql = "update " + entityClass.getName() + " t set t.isDelete=?,t.lastModifyUsername=?,t.lastModifyTime=? where t.id in (:ids)";  
        	Query query = getSession().createQuery(hql);
        	query.setParameterList("ids", ids);
        	query.setParameter(0, true);
        	query.setParameter(1, lasetModUsername);
        	query.setParameter(2, new Date());
        	query.executeUpdate();
            return true;
        }else{
        	return false;
        }
	}  
	
	/**
	 * @see IBaseDao#deletePhysical(Object)
	 */
	@Override
	public boolean deletePhysical(T t) {
		Session session=getSession();
		try{
			session.delete(t);
			session.flush();			
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	/**
	 * @see IBaseDao#deleteById(Serializable)
	 */
	@Override
	public boolean deletePhysicalByIds(Serializable[] ids) {
		if(ids.length<=0){
			return true;
		}
        if (entityClass != null && entityClass.getName()!=null && entityClass.getName() != "") {  
        	String hql = "delete from " + entityClass.getName() + " t where t.id in (:ids)";  
        	Query query = getSession().createQuery(hql);
        	query.setParameterList("ids", ids);
        	query.executeUpdate();
            return true;
        }else{
        	return false;
        }
	}

	/**
	 * @see IBaseDao#deletePhysicalByForeigns(Map<String, Serializable[]>)
	 */
	@Override
	public boolean deletePhysicalByForeigns(Map<String, Serializable[]> foreignMap) {
		if(foreignMap==null || foreignMap.size()<=0){
			return true;
		}
    	String hql = "delete from " + entityClass.getName() + " t where ";
    	String whereHql = "";
		for (String propertyName : foreignMap.keySet()) {
			if(foreignMap.get(propertyName)!=null && foreignMap.get(propertyName).length>0){
				whereHql += "t." + propertyName + " in (:"+propertyName+") and ";
			}
		}
		if(whereHql.equals("")){
			return true;
		}else{
			whereHql = whereHql.substring(0, whereHql.length()-5);  
        	Query query = getSession().createQuery(hql+whereHql);
    		for (String propertyName : foreignMap.keySet()) {
	        	query.setParameterList(propertyName, foreignMap.get(propertyName));
    		}
        	query.executeUpdate();
			return true;
		}
	}

	/**
	 * @see IBaseDao#getFilterList(DetachedCriteria)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<T> getFilterList(DetachedCriteria detachedCriteria) {
		// TODO Auto-generated method stub
		detachedCriteria.add(Restrictions.eq("isDelete", false));
		Session session=getSession();
		List<T> list=detachedCriteria.getExecutableCriteria(session).list();
		//this.closeSession(session);
		return list;
	}

	/**
	 * @see IBaseDao#getPageList(DetachedCriteria, PageInfo)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<T> getPageList(DetachedCriteria detachedCriteria,
			PageInfo pageInfo) {
		if(pageInfo==null){
			pageInfo=new PageInfo();
		}

		detachedCriteria.add(Restrictions.eq("isDelete", false));
		Session session=getSession();
		Criteria criteria=detachedCriteria.getExecutableCriteria(session);
		
		CriteriaImpl criteriaImpl=(CriteriaImpl)criteria;
		Projection projection=criteriaImpl.getProjection();
		//每页显示几条
		int pagePerSize=pageInfo.getSizePerPage();

		//计算总条目数
		int totalCount=0;
		try {
			totalCount = ((Long)criteria.setProjection(Projections.countDistinct("id")).uniqueResult()).intValue();
			pageInfo.setTotalPages(totalCount/pagePerSize + 1);
			pageInfo.setTotalCount(totalCount);
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
		}
		//计算分页数
		pageInfo.setTotalPages((int)Math.ceil(((double)totalCount/pagePerSize)));
		
		if(pageInfo.getCurrentPageNo()>pageInfo.getTotalPages()){
			pageInfo.setCurrentPageNo(pageInfo.getTotalPages());
		}
		//起始序号
		int startIndex=(pageInfo.getCurrentPageNo()-1)*pagePerSize;
		
		criteria.setProjection(projection);
		if(projection==null){
			criteria.setResultTransformer(CriteriaSpecification.ROOT_ENTITY);
			//criteria.setResultTransformer(criteria.DISTINCT_ROOT_ENTITY);//去重
		}
		
		//进行分页查询
		criteria.setFirstResult(startIndex).setMaxResults(pagePerSize);
		List<T> list=criteria.list();
		
		return list;
	}

	/**
	 * @see com.gh.system.dao.IBaseDao#getTotalCount(org.hibernate.criterion.DetachedCriteria)
	 */
	@Override
	public int getTotalCount(DetachedCriteria detachedCriteria) {
		// TODO Auto-generated method stub
		detachedCriteria.add(Restrictions.eq("isDelete", false));
		Session session=getSession();
		Criteria criteria=detachedCriteria.getExecutableCriteria(session);
		int totalCount=0;
		try {
			totalCount = ((Long)criteria.setProjection(Projections.rowCount()).uniqueResult()).intValue();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
		}
		return totalCount;
	}
	
	/**
	 * @see com.gh.system.dao.IBaseDao#getCountNumber(org.hibernate.criterion.DetachedCriteria, java.lang.String)
	 */
	@Override
	public double getCountNumber(DetachedCriteria detachedCriteria,
			String propertyName) {
		// TODO Auto-generated method stub
		detachedCriteria.add(Restrictions.eq("isDelete", false));
		Session session=getSession();
		Criteria criteria=detachedCriteria.getExecutableCriteria(session);
		double countNumber=0;
		try {
			countNumber = ((Double)criteria.setProjection(Projections.count(propertyName)).uniqueResult()).doubleValue();
		} catch (Exception e) {
			// TODO Auto-generated catch block
		}
		return countNumber;
	}

	/**
	 * @see com.gh.system.dao.IBaseDao#getAverageCount(org.hibernate.criterion.DetachedCriteria)
	 */
	@Override
	public double getAverageCount(DetachedCriteria detachedCriteria,String propertyName) {
		// TODO Auto-generated method stub
		detachedCriteria.add(Restrictions.eq("isDelete", false));
		Session session=getSession();
		Criteria criteria=detachedCriteria.getExecutableCriteria(session);
		double averageValue=0;
		try{
			averageValue= ((Double)(criteria.setProjection(Projections.avg(propertyName)).uniqueResult())).doubleValue();
		}catch(Exception e){
			averageValue=0;
		}
		return averageValue;
	}
	
	/**
	 * @see com.gh.system.dao.IBaseDao#excudeHQL(final String HQL)
	 */
	@Override  
    public int excudeHQL(final String HQL) {  
        return sessionFactory.getCurrentSession().createQuery(HQL).executeUpdate();  
    }
	
	/**
	 * @see com.gh.system.dao.IBaseDao#excudeSQL(final String sql)
	 */
    @Override  
    public int excudeSQL(final String sql) {  
        return sessionFactory.getCurrentSession().createSQLQuery(sql).executeUpdate();  
    }


}
