package com.gh.system.service.bean;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.gh.system.dao.IBaseDao;
import com.gh.system.domain.BaseDomain;
import com.gh.system.service.IBaseService;
import com.gh.system.vo.PageInfo;

/**
 * 基础服务
 * @author chen
 *
 * @param <T>
 */
@Service
@Transactional(propagation=Propagation.REQUIRED,rollbackFor=Throwable.class)
public abstract class BaseService<T extends BaseDomain> implements IBaseService<T>{
	
	protected abstract IBaseDao<T> getBaseDao();
	protected DetachedCriteria defaultDetachedCriteria;
	
	@SuppressWarnings("unchecked")
	public BaseService() {
		Type type = getClass().getGenericSuperclass();
		if (type instanceof ParameterizedType) {  
			Class<T> entityClass = (Class<T>) ((ParameterizedType) type).getActualTypeArguments()[0];
			this.defaultDetachedCriteria = DetachedCriteria.forClass(entityClass);
		} else {  
			this.defaultDetachedCriteria = null;  
		}
	}
	/**
	 * @see IBaseService#doGetById(Serializable)
	 */
	@Override
	public T doGetById(Serializable id) throws Exception {
		return getBaseDao().getById(id);
	}

	
	/**
	 * @see IBaseService#doSave(Object)
	 */
	@Override
	public boolean doSave(T t) throws Exception {
		//判断是否为新用户，如果是，新增，否则更新
		if(t.getId()==null || t.getId().isEmpty()){
			return !getBaseDao().save(t).equals("");
		}else{
			return getBaseDao().update(t);
		}
	}

	
	/**
	 * @see IBaseService#doUpdate(Object)
	 */
	@Override
	public boolean doUpdate(T t) throws Exception {
		return getBaseDao().update(t);
	}

	
//	/**
//	 * @see IBaseService#doDeleteById(Serializable)
//	 */
//	@Override
//	public boolean doDeleteById(Serializable id) {
//		try{
//			getBaseDao().deleteById(id);
//		}catch(Exception e){
//			return false;
//		}
//		return true;
//	}

	/**
	 * @see IBaseService#doDeleteByIds(Serializable[] ids)
	 */
	@Override
	public boolean doDeleteByIds(Serializable[] ids) throws Exception {
		return getBaseDao().deletePhysicalByIds(ids);
	}
	
	/**
	 * @see IBaseService#doGetFilterList(DetachedCriteria)
	 */
	@Override
	public List<T> doGetFilterList(DetachedCriteria detachedCriteria) throws Exception {
		if(detachedCriteria == null){
			detachedCriteria = defaultDetachedCriteria;
		}
		return getBaseDao().getFilterList(detachedCriteria);
	}

	
	/**
	 * @see IBaseService#doGetPageList(DetachedCriteria, PageInfo)
	 */
	@Override
	public List<T> doGetPageList(PageInfo pageInfo, DetachedCriteria detachedCriteria) throws Exception {
		if(detachedCriteria == null){
			detachedCriteria = defaultDetachedCriteria;
		}
		return getBaseDao().getPageList(detachedCriteria, pageInfo);
	}

	/**
	 * @see IBaseService#doGetTotalCount(DetachedCriteria detachedCriteria)
	 */
	@Override
	public int doGetTotalCount(DetachedCriteria detachedCriteria) {
		return getBaseDao().getTotalCount(detachedCriteria);
	}
	
//调用时需要在子类加入下面方法
//	/**
//	 * 返回基类baseDao
//	 */
//	@Override
//	public IBaseDao<UserDomain> getBaseDao() {
//		return (IBaseDao<UserDomain>) userDao;
//	}
//	/**
//	 * 返回DetachedCriteria
//	 */
//	@Override
//	protected DetachedCriteria getDetachedCriteria(){
//		return DetachedCriteria.forClass(UserDomain.class);
//	}
}
